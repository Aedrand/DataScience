tagrows[!is.na(tagrows)] <- 1
tagrows[is.na(tagrows)] <- 0
gamedata[,18:347] <- tagrows
rm(tagrows)
gamedata$appid <- NULL
gamedata$name <- NULL
gamedata[,4:9] <- NULL
gamedata[,5:8] <- NULL
gamedata$tags <- NULL
gamedata$developer <- gsub(","," &",gamedata$developer)
gamedata$publisher <- gsub(","," &",gamedata$publisher)
gamedata <- gamedata[!is.na(gamedata$price),]
gamedata$price <- as.numeric(gamedata$price)
gamedata$score_rank <- as.numeric(gamedata$score_rank)
corData <- cor(gamedata[,4:ncol(gamedata)])
png("corrMod.png", width = 1000, height = 1000)
corrplot(corData, main = "Correlation Plot")
dev.off()
corData <- cor(gamedata[,4:ncol(gamedata)])
png("corrMod.png", width = 10000, height = 10000)
corrplot(corData, main = "Correlation Plot")
dev.off()
s <- cor(gamedata[[i]], gamedata$average_forever)
tempList <- data.frame()
s <- 0
for(i in 6:ncol(gamedata)) {
s <- 0
#writeLines(paste("Thing for", colnames(gamedata)[i], sep = " "))
s <- cor(gamedata[[i]], gamedata$average_forever)
s <- s #/nrow(gamedata)
tempList[i - 5,1] <- s
#print(s)
}
summary(tempList)
for(i in 6:ncol(gamedata)) {
c <- cor(gamedata[[i]], gamedata$average_forever)
if(c > -0.006158 && c < 0.020392) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
corData <- cor(gamedata[,4:ncol(gamedata)])
png("corrMod.png", width = 10000, height = 10000)
corrplot(corData, main = "Correlation Plot")
dev.off()
tempList <- data.frame()
s <- 0
for(i in 6:ncol(gamedata)) {
s <- 0
#writeLines(paste("Thing for", colnames(gamedata)[i], sep = " "))
s <- cor(gamedata[[i]], gamedata$average_forever)
s <- s #/nrow(gamedata)
tempList[i - 5,1] <- s
#print(s)
}
summary(tempList)
for(i in 6:ncol(gamedata)) {
c <- cor(gamedata[[i]], gamedata$average_forever)
if(c > -0.012047 && c < 0.042394) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
corData <- cor(gamedata[,4:ncol(gamedata)])
png("corrMod.png", width = 10000, height = 10000)
corrplot(corData, main = "Correlation Plot")
dev.off()
test <- cor(gamedata$developer, gamedata$average_forever)
tempList <- data.frame()
s <- 0
for(i in 6:ncol(gamedata)) {
s <- 0
#writeLines(paste("Thing for", colnames(gamedata)[i], sep = " "))
s <- cor(gamedata[[i]], gamedata$average_forever)
s <- s #/nrow(gamedata)
tempList[i - 5,1] <- s
#print(s)
}
summary(tempList)
for(i in 6:ncol(gamedata)) {
c <- cor(gamedata[[i]], gamedata$average_forever)
if(c > -0.02281 && c < 0.05842) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
corData <- cor(gamedata[,4:ncol(gamedata)])
png("corrMod.png", width = 10000, height = 10000)
corrplot(corData, main = "Correlation Plot")
dev.off()
s <- sum(gamedata[,i])
tempList2 <- data.frame()
s <- 0
for(i in 6:ncol(gamedata)) {
s <- 0
#writeLines(paste("Thing for", colnames(gamedata)[i], sep = " "))
s <- sum(gamedata[,i])
s <- s #/nrow(gamedata)
tempList2[i - 5,1] <- s
#print(s)
}
summary(tempList2)
for(i in 6:ncol(gamedata)) {
if(nrow(gamedata[gamedata[,i] == 1,]) < 648) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
View(gamedata)
corData <- cor(gamedata[,4:ncol(gamedata)])
png("corrMod.png", width = 10000, height = 10000)
corrplot(corData, main = "Correlation Plot")
dev.off()
View(gamedata)
gamedata$developer <- NULL
gamedata$publisher <- NULL
gamedata.binned <- gamedata
gamedata.binned$average_forever <- discretize(gamedata$average_forever, "frequency", categories = 10)
save(gamedata, file= 'modgamedata.Rda')
save(gamedata.binned, file= 'modgamedataBinned.Rda')
write.csv(gamedata, file= 'modGameData.csv')
write.csv(gamedata.binned, file= 'modGameDataBinned.csv')
write.arff(gamedata, file= 'modGameData.arff')
write.arff(gamedata.binned, file= 'modGameDataBinned.arff')
library(car)
library(lattice)
library(Hmisc)
library(caret)
library(RWeka)
library(rpart)
library(partykit)
library(arules)
library(e1071)
library(OneR)
library(mlbench)
load('modgamedata.Rda')
load('modgamedataBinned.Rda')
set.seed(1)
trainSet <- createDataPartition(gamedata$average_forever, p=.6)[[1]]
gamedata.train <- gamedata[trainSet,]
gamedata.test <- gamedata[-trainSet,]
rm(trainSet)
trainSet <- createDataPartition(gamedata.binned$average_forever, p=.6)[[1]]
gamedata.binned.train <- gamedata.binned[trainSet,]
gamedata.binned.test <- gamedata.binned[-trainSet,]
rm(trainSet)
C45.gamedata <- J48(average_forever ~ ., data=gamedata.binned.train)
summary(C45.gamedata)
plot(C45.gamedata)
RIPPER.gamedata <- JRip(average_forever ~ ., data=gamedata.binned.train)
print(RIPPER.gamedata)
library(corrplot)
library(arules)
library(RWeka)
load('steamspy.Rda')
gamedata <- steamspy
tagrows <- gamedata[,18:ncol(gamedata)]
tagrows[!is.na(tagrows)] <- 1
tagrows[is.na(tagrows)] <- 0
gamedata[,18:347] <- tagrows
rm(tagrows)
gamedata$appid <- NULL
gamedata$name <- NULL
gamedata[,4:9] <- NULL
gamedata[,5:8] <- NULL
gamedata$tags <- NULL
gamedata$developer <- gsub(","," &",gamedata$developer)
gamedata$publisher <- gsub(","," &",gamedata$publisher)
gamedata <- gamedata[!is.na(gamedata$price),]
gamedata$price <- as.numeric(gamedata$price)
gamedata$score_rank <- as.numeric(gamedata$score_rank)
for(i in 6:ncol(gamedata)) {
c <- cor(gamedata[[i]], gamedata$average_forever)
if(c > -0.006158 && c < 0.020392) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
for(i in 6:ncol(gamedata)) {
c <- cor(gamedata[[i]], gamedata$average_forever)
if(c > -0.012047 && c < 0.042394) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
for(i in 6:ncol(gamedata)) {
c <- cor(gamedata[[i]], gamedata$average_forever)
if(c > -0.02281 && c < 0.05842) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
for(i in 6:ncol(gamedata)) {
if(nrow(gamedata[gamedata[,i] == 1,]) < 648) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
for(i in 1:nrow(gamedata)) {
if(rowSums(gamedata[i,6:ncol(gamedata)]) < 1) {
gamedata[i,] <- NA
}
}
gamedata <- gamedata[!is.na(gamedata$Indie),]
gamedata$developer <- NULL
gamedata$publisher <- NULL
gamedata.binned <- gamedata
gamedata.binned$average_forever <- discretize(gamedata$average_forever, "frequency", categories = 10)
save(gamedata, file= 'modgamedata.Rda')
save(gamedata.binned, file= 'modgamedataBinned.Rda')
write.csv(gamedata, file= 'modGameData.csv')
write.csv(gamedata.binned, file= 'modGameDataBinned.csv')
write.arff(gamedata, file= 'modGameData.arff')
write.arff(gamedata.binned, file= 'modGameDataBinned.arff')
rm(gamedata)
rm(gamedata.binned)
rm(steamspy)
rm(i)
rm(c)
load('modgamedata.Rda')
load('modgamedataBinned.Rda')
set.seed(1)
trainSet <- createDataPartition(gamedata$average_forever, p=.6)[[1]]
gamedata.train <- gamedata[trainSet,]
gamedata.test <- gamedata[-trainSet,]
rm(trainSet)
trainSet <- createDataPartition(gamedata.binned$average_forever, p=.6)[[1]]
gamedata.binned.train <- gamedata.binned[trainSet,]
gamedata.binned.test <- gamedata.binned[-trainSet,]
rm(trainSet)
C45.gamedata <- J48(average_forever ~ ., data=gamedata.binned.train)
summary(C45.gamedata)
plot(C45.gamedata)
RIPPER.gamedata <- JRip(average_forever ~ ., data=gamedata.binned.train)
print(RIPPER.gamedata)
Bayes.gamedata <- naiveBayes(average_forever ~ .,data = gamedata.binned.train)
summary(Bayes.gamedata)
C45.predict <- predict(C45.gamedata, gamedata.binned.test)
C45.eval <- confusionMatrix(C45.predict, gamedata.binned.test$average_forever)
print(C45.eval)
RIPPER.predict <- predict(RIPPER.gamedata, gamedata.binned.test)
RIPPER.eval <- confusionMatrix(RIPPER.predict, gamedata.binned.test$average_forever)
print(RIPPER.eval)
Bayes.predict <- predict(Bayes.gamedata, gamedata.binned.test)
eval_model(Bayes.predict, gamedata.binned.test)
load('steamspy.Rda')
gamedata <- steamspy
tagrows <- gamedata[,18:ncol(gamedata)]
tagrows[!is.na(tagrows)] <- 1
tagrows[is.na(tagrows)] <- 0
gamedata[,18:347] <- tagrows
rm(tagrows)
gamedata$appid <- NULL
gamedata$name <- NULL
gamedata[,4:9] <- NULL
gamedata[,5:8] <- NULL
gamedata$tags <- NULL
gamedata$developer <- gsub(","," &",gamedata$developer)
gamedata$publisher <- gsub(","," &",gamedata$publisher)
gamedata <- gamedata[!is.na(gamedata$price),]
gamedata$price <- as.numeric(gamedata$price)
gamedata$score_rank <- as.numeric(gamedata$score_rank)
for(i in 6:ncol(gamedata)) {
if(nrow(gamedata[gamedata[,i] == 1,]) < 1051) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
for(i in 1:nrow(gamedata)) {
if(rowSums(gamedata[i,6:ncol(gamedata)]) < 1) {
gamedata[i,] <- NA
}
}
gamedata <- gamedata[!is.na(gamedata$Indie),]
gamedata$developer <- NULL
gamedata$publisher <- NULL
gamedata.binned <- gamedata
gamedata.binned$average_forever <- discretize(gamedata$average_forever, "frequency", categories = 10)
save(gamedata, file= 'modgamedata.Rda')
save(gamedata.binned, file= 'modgamedataBinned.Rda')
write.csv(gamedata, file= 'modGameData.csv')
write.csv(gamedata.binned, file= 'modGameDataBinned.csv')
write.arff(gamedata, file= 'modGameData.arff')
write.arff(gamedata.binned, file= 'modGameDataBinned.arff')
rm(gamedata)
rm(gamedata.binned)
rm(steamspy)
rm(i)
load('modgamedata.Rda')
load('modgamedataBinned.Rda')
set.seed(1)
trainSet <- createDataPartition(gamedata$average_forever, p=.6)[[1]]
gamedata.train <- gamedata[trainSet,]
gamedata.test <- gamedata[-trainSet,]
rm(trainSet)
trainSet <- createDataPartition(gamedata.binned$average_forever, p=.6)[[1]]
gamedata.binned.train <- gamedata.binned[trainSet,]
gamedata.binned.test <- gamedata.binned[-trainSet,]
rm(trainSet)
C45.gamedata <- J48(average_forever ~ ., data=gamedata.binned.train)
summary(C45.gamedata)
RIPPER.gamedata <- JRip(average_forever ~ ., data=gamedata.binned.train)
print(RIPPER.gamedata)
C45.predict <- predict(C45.gamedata, gamedata.binned.test)
C45.eval <- confusionMatrix(C45.predict, gamedata.binned.test$average_forever)
print(C45.eval)
RIPPER.predict <- predict(RIPPER.gamedata, gamedata.binned.test)
RIPPER.eval <- confusionMatrix(RIPPER.predict, gamedata.binned.test$average_forever)
print(RIPPER.eval)
load('steamspy.Rda')
gamedata <- steamspy
tagrows <- gamedata[,18:ncol(gamedata)]
tagrows[!is.na(tagrows)] <- 1
tagrows[is.na(tagrows)] <- 0
gamedata[,18:347] <- tagrows
rm(tagrows)
gamedata$appid <- NULL
gamedata$name <- NULL
gamedata[,4:9] <- NULL
gamedata[,5:8] <- NULL
gamedata$tags <- NULL
gamedata$developer <- gsub(","," &",gamedata$developer)
gamedata$publisher <- gsub(","," &",gamedata$publisher)
gamedata <- gamedata[!is.na(gamedata$price),]
gamedata$price <- as.numeric(gamedata$price)
gamedata$score_rank <- as.numeric(gamedata$score_rank)
for(i in 6:ncol(gamedata)) {
c <- cor(gamedata[[i]], gamedata$average_forever)
if(c > -0.006158 && c < 0.020392) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
for(i in 6:ncol(gamedata)) {
c <- cor(gamedata[[i]], gamedata$average_forever)
if(c > -0.012047 && c < 0.042394) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
for(i in 6:ncol(gamedata)) {
c <- cor(gamedata[[i]], gamedata$average_forever)
if(c > -0.02281 && c < 0.05842) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
tempList2 <- data.frame()
s <- 0
for(i in 6:ncol(gamedata)) {
s <- 0
#writeLines(paste("Thing for", colnames(gamedata)[i], sep = " "))
s <- sum(gamedata[,i])
s <- s #/nrow(gamedata)
tempList2[i - 5,1] <- s
#print(s)
}
summary(tempList2)
for(i in 6:ncol(gamedata)) {
if(nrow(gamedata[gamedata[,i] == 1,]) < 648) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
for(i in 1:nrow(gamedata)) {
if(rowSums(gamedata[i,6:ncol(gamedata)]) < 1) {
gamedata[i,] <- NA
}
}
gamedata <- gamedata[!is.na(gamedata$Indie),]
gamedata$developer <- NULL
gamedata$publisher <- NULL
gamedata$success <- 0
View(gamedata)
gamedata$success <- NULL
gamedata$likely_to_succeed <- 0
summary(gamedata$average_forever)
gamedata$likely_to_succeed <- 0
for(i in nrow(gamedata)) {
if(gamedata[i,2] > 437) {
gamedata[i,20] <- 1
}
}
gamedata$likely_to_succeed <- 0
for(i in 1:nrow(gamedata)) {
if(gamedata[i,2] > 437) {
gamedata[i,20] <- 1
}
}
sum(gamedata$likely_to_succeed)
gamedata$average_forever <- NULL
gamedata$average_forever <- NULL
gamedata.binned <- gamedata
gamedata.binned$average_forever <- discretize(gamedata$average_forever, "frequency", categories = 10)
gamedata$likely_to_succeed <- FALSE
gamedata$likely_to_succeed <- "False"
View(gamedata)
gamedata$likely_to_succeed <- FALSE
View(gamedata)
gamedata$likely_to_succeed <- "No"
for(i in 1:nrow(gamedata)) {
if(gamedata[i,2] > 437) {
gamedata[i,20] <- "Yes"
}
}
View(gamedata)
load('steamspy.Rda')
gamedata <- steamspy
tagrows <- gamedata[,18:ncol(gamedata)]
tagrows[!is.na(tagrows)] <- 1
tagrows[is.na(tagrows)] <- 0
gamedata[,18:347] <- tagrows
rm(tagrows)
gamedata$appid <- NULL
gamedata$name <- NULL
gamedata[,4:9] <- NULL
gamedata[,5:8] <- NULL
gamedata$tags <- NULL
gamedata$developer <- gsub(","," &",gamedata$developer)
gamedata$publisher <- gsub(","," &",gamedata$publisher)
gamedata <- gamedata[!is.na(gamedata$price),]
gamedata$price <- as.numeric(gamedata$price)
gamedata$score_rank <- as.numeric(gamedata$score_rank)
for(i in 6:ncol(gamedata)) {
if(nrow(gamedata[gamedata[,i] == 1,]) < 648) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
for(i in 6:ncol(gamedata)) {
c <- cor(gamedata[[i]], gamedata$average_forever)
if(c > -0.006158 && c < 0.020392) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
for(i in 6:ncol(gamedata)) {
c <- cor(gamedata[[i]], gamedata$average_forever)
if(c > -0.012047 && c < 0.042394) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
for(i in 6:ncol(gamedata)) {
c <- cor(gamedata[[i]], gamedata$average_forever)
if(c > -0.02281 && c < 0.05842) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
for(i in 1:nrow(gamedata)) {
if(rowSums(gamedata[i,6:ncol(gamedata)]) < 1) {
gamedata[i,] <- NA
}
}
gamedata <- gamedata[!is.na(gamedata$Indie),]
gamedata$developer <- NULL
gamedata$publisher <- NULL
gamedata$likely_to_succeed <- "No"
for(i in 1:nrow(gamedata)) {
if(gamedata[i,2] > 437) {
gamedata[i,20] <- "Yes"
}
}
gamedata$average_forever <- NULL
save(gamedata, file= 'modgamedata.Rda')
save(gamedata.binned, file= 'modgamedataBinned.Rda')
write.csv(gamedata, file= 'modGameData.csv')
write.csv(gamedata.binned, file= 'modGameDataBinned.csv')
write.arff(gamedata, file= 'modGameData.arff')
write.arff(gamedata.binned, file= 'modGameDataBinned.arff')
load('modgamedata.Rda')
set.seed(1)
trainSet <- createDataPartition(gamedata$average_forever, p=.6)[[1]]
gamedata.train <- gamedata[trainSet,]
gamedata.test <- gamedata[-trainSet,]
load('modgamedata.Rda')
set.seed(1)
trainSet <- createDataPartition(gamedata$average_forever, p=.6)[[1]]
gamedata.train <- gamedata[trainSet,]
set.seed(1)
trainSet <- createDataPartition(gamedata$likely_to_succeed, p=.6)[[1]]
gamedata.train <- gamedata[trainSet,]
gamedata.test <- gamedata[-trainSet,]
rm(trainSet)
C45.gamedata <- J48(likely_to_succeed ~ ., data=gamedata.binned.train)
C45.gamedata <- J48(likely_to_succeed ~ ., data=gamedata.train)
gamedata$likely_to_succeed <- as.factor(gamedata$likely_to_succeed)
set.seed(1)
trainSet <- createDataPartition(gamedata$likely_to_succeed, p=.6)[[1]]
gamedata.train <- gamedata[trainSet,]
gamedata.test <- gamedata[-trainSet,]
rm(trainSet)
C45.gamedata <- J48(likely_to_succeed ~ ., data=gamedata.train)
summary(C45.gamedata)
plot(C45.gamedata)
RIPPER.gamedata <- JRip(average_forever ~ ., data=gamedata.binned.train)
RIPPER.gamedata <- JRip(likely_to_succeed ~ ., data=gamedata.train)
print(RIPPER.gamedata)
Bayes.gamedata <- naiveBayes(likely_to_succeed ~ .,data = gamedata.train)
summary(Bayes.gamedata)
C45.predict <- predict(C45.gamedata, gamedata.binned.test)
C45.predict <- predict(C45.gamedata, gamedata.test)
C45.eval <- confusionMatrix(C45.predict, gamedata.test$likely_to_succeed)
print(C45.eval)
RIPPER.predict <- predict(RIPPER.gamedata, gamedata.test)
RIPPER.eval <- confusionMatrix(RIPPER.predict, gamedata.test$likely_to_succeed)
print(RIPPER.eval)
library(neuralnet)
install.packages("neuralnet")
library(neuralnet)
write.arff(gamedata, file= 'modGameData.arff')
