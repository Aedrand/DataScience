RIPPER.gamedata <- JRip(average_forever ~ ., data=gamedata.binned.train)
??JRip
library(car)
library(lattice)
library(Hmisc)
library(caret)
library(RWeka)
library(rpart)
library(partykit)
library(arules)
library(e1071)
load('modgamedata.Rda')
setwd("C:/Users/Andrew Riggs/GIT REPOS/DataScience/Working")
load('modgamedata.Rda')
load('modgamedataBinned.Rda')
set.seed(1)
trainSet <- createDataPartition(gamedata$average_forever, p=.6)[[1]]
gamedata.train <- gamedata[trainSet,]
gamedata.test <- gamedata[-trainSet,]
rm(trainSet)
trainSet <- createDataPartition(gamedata.binned$average_forever, p=.6)[[1]]
gamedata.binned.train <- gamedata.binned[trainSet,]
gamedata.binned.test <- gamedata.binned[-trainSet,]
rm(trainSet)
C45.gamedata <- J48(average_forever ~ ., data=gamedata.binned.train)
summary(C45.gamedata)
plot(C45.gamedata)
??plot
?plot
RIPPER.gamedata <- JRip(average_forever ~ ., data=gamedata.binned.train)
print(RIPPER.gamedata)
plot(C45.gamedata)
print(C45.gamedata)
C45.gamedata <- J48(average_forever ~ ., data=gamedata.binned.train, control = Weka_control(R = TRUE))
summary(C45.gamedata)
C45.gamedata <- J48(average_forever ~ ., data=gamedata.binned.train)
summary(C45.gamedata)
plot(C45.gamedata)
load('steamspy.Rda')
View(steamspy)
load('modgamedata.Rda')
corModdata <- cor(steamspy[,6:16])
corrplot(corModdata, main = "Correlation Plot")
library(corrplot)
install.packages('"corrplot"')
install.packages("corrplot")
library(corrplot)
corModdata <- cor(steamspy[,6:16])
corrplot(corModdata, main = "Correlation Plot")
png("corrplot.png", width = 1000, height = 1000)
corrplot(corModdata, main = "Correlation Plot")
dev.off()
View(gamedata)
gamedata <- steamspy
tagrows <- gamedata[,18:ncol(gamedata)]
tagrows[!is.na(tagrows)] <- 1
tagrows[is.na(tagrows)] <- 0
gamedata[,18:347] <- tagrows
rm(tagrows)
gamedata$appid <- NULL
gamedata$name <- NULL
gamedata[,4:9] <- NULL
gamedata[,5:8] <- NULL
gamedata$tags <- NULL
gamedata$developer <- gsub(","," &",gamedata$developer)
gamedata$publisher <- gsub(","," &",gamedata$publisher)
gamedata <- gamedata[!is.na(gamedata$price),]
gamedata$price <- as.numeric(gamedata$price)
gamedata$score_rank <- as.numeric(gamedata$score_rank)
for(i in 6:ncol(gamedata)) {
if(nrow(gamedata[gamedata[,i] == 1,]) < 20) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
load('modgamedata.Rda')
load('modgamedataBinned.Rda')
set.seed(1)
trainSet <- createDataPartition(gamedata$average_forever, p=.6)[[1]]
gamedata.train <- gamedata[trainSet,]
gamedata.test <- gamedata[-trainSet,]
rm(trainSet)
trainSet <- createDataPartition(gamedata.binned$average_forever, p=.6)[[1]]
gamedata.binned.train <- gamedata.binned[trainSet,]
gamedata.binned.test <- gamedata.binned[-trainSet,]
rm(trainSet)
??OneR
install.packages("OneR")
install.packages("mlbench")
library(mlbench)
library(OneR)
print(OneR.gamedata)
OneR.gamedata <- OneR(gamedata.binned.train, verbose = TRUE)
Bayes.gamedata <- naiveBayes(average_forever ~ .,data = gamedata.binned.train)
summary(Bayes.gamedata)
print(RIPPER.gamedata)
summary(C45.gamedata)
summary(OneR.gamedata)
plot(C45.gamedata)
C45.gamedata <- J48(average_forever ~ ., data=gamedata.binned.train)
summary(C45.gamedata)
plot(C45.gamedata)
summary(Bayes.gamedata)
Bayes.gamedata <- naiveBayes(average_forever ~ .,data = gamedata.binned.train)
summary(Bayes.gamedata)
?naiveBayes
?J48
print(RIPPER.gamedata)
?JRip
C45.predict <- predict(C45.gamedata, gamedata.binned.test$average_forever)
C45.predict <- predict(C45.gamedata, gamedata.binned.test$average_forever)
C45.gamedata <- J48(average_forever ~ ., data=gamedata.binned.train)
C45.predict <- predict(C45.gamedata, gamedata.binned.test$average_forever)
View(gamedata.train)
View(gamedata.test)
RIPPER.predict <- predict(RIPPER.gamedata, gamedata.binned.test$average_forever)
C45.predict <- predict(C45.gamedata, gamedata.binned.test$average_forever)
View(gamedata.binned.train)
load('modgamedata.Rda')
load('modgamedataBinned.Rda')
View(gamedata)
View(gamedata.binned)
set.seed(1)
trainSet <- createDataPartition(gamedata$average_forever, p=.6)[[1]]
gamedata.train <- gamedata[trainSet,]
gamedata.test <- gamedata[-trainSet,]
rm(trainSet)
View(gamedata.test)
View(gamedata$score_rank[is.na(gamedata$score_rank),])
View(gamedata$score_rank[is.na(gamedata$score_rank)])
gamedata$score_rank[is.na(gamedata$score_rank)] <- 0
load('steamspy.Rda')
gamedata <- steamspy
tagrows <- gamedata[,18:ncol(gamedata)]
tagrows[!is.na(tagrows)] <- 1
tagrows[is.na(tagrows)] <- 0
gamedata[,18:347] <- tagrows
rm(tagrows)
gamedata$appid <- NULL
gamedata$name <- NULL
gamedata[,4:9] <- NULL
gamedata[,5:8] <- NULL
gamedata$tags <- NULL
gamedata$developer <- gsub(","," &",gamedata$developer)
gamedata$publisher <- gsub(","," &",gamedata$publisher)
gamedata <- gamedata[!is.na(gamedata$price),]
gamedata$price <- as.numeric(gamedata$price)
gamedata$score_rank <- as.numeric(gamedata$score_rank)
for(i in 6:ncol(gamedata)) {
if(nrow(gamedata[gamedata[,i] == 1,]) < 20) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
for(i in 1:nrow(gamedata)) {
if(rowSums(gamedata[i,6:ncol(gamedata)]) < 1) {
gamedata[i,] <- NA
}
}
gamedata <- gamedata[!is.na(gamedata$`Free to Play`),]
gamedata$developer <- NULL
gamedata$publisher <- NULL
gamedata$score_rank[is.na(gamedata$score_rank)] <- 0
gamedata.binned <- gamedata
gamedata.binned$average_forever <- discretize(gamedata$average_forever, "frequency", categories = 10)
save(gamedata, file= 'modgamedata.Rda')
save(gamedata.binned, file= 'modgamedataBinned.Rda')
write.csv(gamedata, file= 'modGameData.csv')
write.csv(gamedata.binned, file= 'modGameDataBinned.csv')
write.arff(gamedata, file= 'modGameData.arff')
write.arff(gamedata.binned, file= 'modGameDataBinned.arff')
rm(gamedata)
rm(gamedata.binned)
rm(steamspy)
rm(i)
load('modgamedata.Rda')
load('modgamedataBinned.Rda')
set.seed(1)
trainSet <- createDataPartition(gamedata$average_forever, p=.6)[[1]]
gamedata.train <- gamedata[trainSet,]
gamedata.test <- gamedata[-trainSet,]
rm(trainSet)
trainSet <- createDataPartition(gamedata.binned$average_forever, p=.6)[[1]]
gamedata.binned.train <- gamedata.binned[trainSet,]
gamedata.binned.test <- gamedata.binned[-trainSet,]
rm(trainSet)
C45.gamedata <- J48(average_forever ~ ., data=gamedata.binned.train)
summary(C45.gamedata)
plot(C45.gamedata)
C45.predict <- predict(C45.gamedata, gamedata.binned.test$average_forever)
load('modgamedata.Rda')
load('modgamedataBinned.Rda')
set.seed(1)
View(gamedata)
C45.predict <- predict(C45.gamedata, gamedata.binned.test$average_forever)
set.seed(1)
trainSet <- createDataPartition(gamedata$average_forever, p=.6)[[1]]
gamedata.train <- gamedata[trainSet,]
gamedata.test <- gamedata[-trainSet,]
rm(trainSet)
trainSet <- createDataPartition(gamedata.binned$average_forever, p=.6)[[1]]
gamedata.binned.train <- gamedata.binned[trainSet,]
gamedata.binned.test <- gamedata.binned[-trainSet,]
rm(trainSet)
View(gamedata.binned.train)
View(gamedata.test)
View(gamedata.binned.test)
C45.gamedata <- J48(average_forever ~ ., data=gamedata.binned.train)
C45.predict <- predict(C45.gamedata, gamedata.binned.test$average_forever)
str(gamedata.binned.train$score_rank)
RIPPER.gamedata <- JRip(average_forever ~ ., data=gamedata.binned.train)
C45.predict <- predict(C45.gamedata, gamedata.binned.test)
RIPPER.predict <- predict(RIPPER.gamedata, gamedata.binned.test)
C45.eval <- confusionMatrix(C45.predict, gamedata.binned.test$average_forever)
print(C45.eval)
RIPPER.predict <- predict(RIPPER.gamedata, gamedata.binned.test)
RIPPER.eval <- confusionMatrix(RIPPER.predict, gamedata.binned.test$average_forever)
Bayes.predict <- predict(Bayes.gamedata, gamedata.binned.test)
Bayes.gamedata <- naiveBayes(average_forever ~ .,data = gamedata.binned.train)
Bayes.predict <- predict(Bayes.gamedata, gamedata.binned.test)
eval_model(Bayes.gamedata, gamedata.binned.test)
eval_model(Bayes.predict, gamedata.binned.test)
RIPPER.predict <- predict(RIPPER.gamedata, gamedata.binned.test)
RIPPER.eval <- confusionMatrix(RIPPER.predict, gamedata.binned.test$average_forever)
print(RIPPER.eval)
Bayes.gamedata <- naiveBayes(average_forever ~ .,data = gamedata.binned.train)
summary(Bayes.gamedata)
Bayes.predict <- predict(Bayes.gamedata, gamedata.binned.test)
eval_model(Bayes.predict, gamedata.binned.test)
summary(Bayes.gamedata)
View(gamedata.binned.train)
Bayes.gamedata <- naiveBayes(average_forever ~ .,data = gamedata.binned.train)
summary(Bayes.gamedata)
Bayes.predict <- predict(Bayes.gamedata, gamedata.binned.test)
eval_model(Bayes.predict, gamedata.binned.test)
library(car)
library(lattice)
library(Hmisc)
library(caret)
library(RWeka)
library(rpart)
library(partykit)
library(arules)
library(e1071)
library(OneR)
library(mlbench)
C45.gamedata <- J48(average_forever ~ ., data=gamedata.binned.train)
load('modgamedata.Rda')
load('modgamedataBinned.Rda')
set.seed(1)
trainSet <- createDataPartition(gamedata$average_forever, p=.6)[[1]]
gamedata.train <- gamedata[trainSet,]
gamedata.test <- gamedata[-trainSet,]
rm(trainSet)
trainSet <- createDataPartition(gamedata.binned$average_forever, p=.6)[[1]]
gamedata.binned.train <- gamedata.binned[trainSet,]
gamedata.binned.test <- gamedata.binned[-trainSet,]
rm(trainSet)
C45.gamedata <- J48(average_forever ~ ., data=gamedata.binned.train)
summary(C45.gamedata)
plot(C45.gamedata)
str(C45.gamedata)
Bayes.gamedata <- naiveBayes(average_forever ~ .,data = gamedata.binned.train)
summary(Bayes.gamedata)
str(Bayes.gamedata)
library(arules)
library(RWeka)
load('steamspy.Rda')
gamedata <- steamspy
tagrows <- gamedata[,18:ncol(gamedata)]
tagrows[!is.na(tagrows)] <- 1
tagrows[is.na(tagrows)] <- 0
gamedata[,18:347] <- tagrows
rm(tagrows)
gamedata$appid <- NULL
gamedata$name <- NULL
gamedata[,4:9] <- NULL
gamedata[,5:8] <- NULL
gamedata$tags <- NULL
gamedata$developer <- gsub(","," &",gamedata$developer)
gamedata$publisher <- gsub(","," &",gamedata$publisher)
gamedata <- gamedata[!is.na(gamedata$price),]
gamedata$price <- as.numeric(gamedata$price)
gamedata$score_rank <- as.numeric(gamedata$score_rank)
for(i in 6:ncol(gamedata)) {
if(nrow(gamedata[gamedata[,i] == 1,]) < 20) {
gamedata[,i] <- NA
}
}
gamedata <- gamedata[, colSums(is.na(gamedata)) != nrow(gamedata)]
for(i in 1:nrow(gamedata)) {
if(rowSums(gamedata[i,6:ncol(gamedata)]) < 1) {
gamedata[i,] <- NA
}
}
gamedata <- gamedata[!is.na(gamedata$`Free to Play`),]
gamedata$developer <- NULL
gamedata$publisher <- NULL
gamedata.binned <- gamedata
gamedata.binned$average_forever <- discretize(gamedata$average_forever, "frequency", categories = 10)
save(gamedata, file= 'modgamedata.Rda')
save(gamedata.binned, file= 'modgamedataBinned.Rda')
write.csv(gamedata, file= 'modGameData.csv')
write.csv(gamedata.binned, file= 'modGameDataBinned.csv')
write.arff(gamedata, file= 'modGameData.arff')
write.arff(gamedata.binned, file= 'modGameDataBinned.arff')
